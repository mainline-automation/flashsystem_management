---
- name: Create or validate hosts
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    # hostname: 
    # _iqn_ : 
    # _portset_: 
    hostname: 'esxlab'
    _wwpn_: 21000024FF3E263D
  vars_files:
    - vars/authentication.yml
      
  tasks:
  - name: read the csv file
    community.general.read_csv:
      path: vars/addvolume.csv
    register: added_volumes
 
  - name: make sure that host exists using ibm.storage_virtualize.ibm_svc_host and create if they don't
  # errors are ignored because this will error out if the host already exists
    ibm.storage_virtualize.ibm_svc_host:
      clustername: "{{ clustername }}"
      name: "{{ hostname }}"
      # iscsiname: "{{ _iqn_ }}"
      # portset: "{{ _portset_ }}""
      fcwwpn: "{{ _wwpn_ }}"
      token: "{{ api_token }}"
      state: present
      protocol: scsi
      type: generic
      validate_certs: false
      log_path: '/tmp/svc_create_host.debug'
    ignore_errors: true
    
  - name: use ibm.storage_virtualize.ibm_svc_manage_volume with a loop on the variable volumes 
    ibm.storage_virtualize.ibm_svc_manage_volume:
      clustername: "{{ clustername }}"
      log_path: '/tmp/svc_create_volume.debug'
      state: present
      name: "{{ item.name }}"
      size: "{{ item.size }}"
      unit: "{{ item.unit }}"
      thin: "{{ item.thin }}"
      pool: "{{ item.pool }}"
      validate_certs: false
      token: "{{ api_token }}"
    loop: "{{ added_volumes.list}}"

  - name: map volume to host
    ibm.storage_virtualize.ibm_svc_vol_map:
      clustername: "{{ clustername }}"
      host: "{{ hostname }}"
      state: present
      volname: "{{ item.name }}"
      log_path: '/tmp/map_volume_to_host.debug'
      token: "{{ api_token }}"
    loop: "{{ added_volumes.list }}"
  
  - name: gather UIDs for created volumes
    ibm.storage_virtualize.ibm_svc_info:
      clustername: "{{ clustername }}"
      token: "{{ api_token }}"
      gather_subset: vol
      objectname: "{{ item.name }}"
    with_items: "{{ added_volumes.list }}"
    register: volume_info

  - name: debugging
    ansible.builtin.debug:
      var: "{{ community.general.json_query ('item.Volume') }}"
    loop: "{{ volume_info | flatten }}"

  # - name: set fact with volume_facts
  #   ansible.builtin.set_fact:
  #     volume_facts: "{{ volume_info | default([]) | combine({ item.vdisk_UID : item.value
  #       }) }}"
  #   with_items: "{{ volume_info | flatten }}"

  
  # - name: create datastore with community.vmware.vmware_host_datastore for each vdisk_UID in volume_facts
  #   community.vmware.vmware_host_datastore:
  #     hostname: '{{ vcenter_hostname }}'
  #     username: '{{ vcenter_username }}'
  #     password: '{{ vcenter_password }}'
  #     datastore_name: '{{ item.esx_datastore_name }}'
  #     datastore_type: '{{ item.esx_datastore_type }}'
  #     vmfs_device_name: "naa.{{ query( 'dict', item.vdisk_UID ) }}"
  #     vmfs_version: 6.5
  #     esxi_hostname: '{{ inventory_hostname }}'
  #     state: present
  #   delegate_to: localhost
  #   with_items: volume_facts


